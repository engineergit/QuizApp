{"version":3,"sources":["Components/Api/Api.ts","Components/QuestionCard.tsx","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchData","number","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","incorrect_answers","correct_answer","QuestionCard","questionNr","totalQs","userAnswer","callback","QuestionCardWrappper","className","dangerouslySetInnerHTML","__html","AnswerWrapper","answer","_id","ButtonWrapper","correct","correctAnswer","userClicked","disabled","value","onClick","styled","div","GlobalStyle","createGlobalStyle","App","useState","Loading","setLoading","Questions","setQuestions","UserAnswers","setUserAnswers","GameOver","setGameOver","setNumber","score","setScore","startTrivia","EASY","newQuest","checkAnswer","e","currentTarget","prev","answerObj","Main","length","Button","undefined","TotalQs","nextqs","button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kHAYYA,E,uGAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,YAAMC,EAAS,uCAAG,WACrBC,EACAC,GAFqB,iBAAAC,EAAA,6DAIfC,EAJe,6CAIkCH,EAJlC,uBAIuDC,EAJvD,2BAKKG,MAAMD,GALX,8BAKsBE,OALtB,cAKfC,EALe,OAMrBC,QAAQC,IAAI,mBAAoBF,GANX,kBAQdA,EAAKG,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAEdA,GAFa,IAGhBC,QAAQ,GAAD,mBAAOD,EAASE,mBAAhB,CAAmCF,EAASG,uBAXtC,2CAAH,wD,OCePC,EAlBuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,QAASL,EAAxB,EAAwBA,QAASM,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,SAAUR,EAAvD,EAAuDA,SAAvD,OAElC,eAACS,EAAD,WACI,oBAAGC,UAAU,SAAb,uBAAiCL,EAAjC,MAAgDC,KAChD,mBAAGK,wBAAyB,CAAEC,OAAQZ,KACtC,cAACa,EAAD,iBACKZ,QADL,IACKA,OADL,EACKA,EAASF,KAAI,SAACe,EAAQC,GAAT,OACV,cAACC,EAAD,CAAeC,SAAmB,OAAVV,QAAU,IAAVA,OAAA,EAAAA,EAAYW,iBAAkBJ,EAClDK,aAAuB,OAAVZ,QAAU,IAAVA,OAAA,EAAAA,EAAYO,UAAWA,EADxC,SAEI,wBAAQM,WAAUb,EAA2Bc,MAAOP,EAAQQ,QAASd,EAArE,SACI,sBAAMG,wBAAyB,CAAEC,OAAQE,QAFIC,YAiB/DN,EAAuBc,IAAOC,IAAV,gRAcpBX,EAAgBU,IAAOC,IAAV,wOAabR,EAAgBO,IAAOC,IAAV,gjBAgBD,gBAAGP,EAAH,EAAGA,QAASE,EAAZ,EAAYA,YAAZ,OACVF,EACM,4CACCA,GAAWE,EACR,2CACA,8CCtFLM,EAAcC,YAAH,gaC2FTC,EAtFH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEkBF,mBAA0B,IAF5C,mBAETG,EAFS,KAEEC,EAFF,OAGsBJ,mBAAyB,IAH/C,mBAGTK,EAHS,KAGIC,EAHJ,OAIgBN,oBAAS,GAJzB,mBAITO,EAJS,KAICC,EAJD,OAMYR,mBAAS,GANrB,mBAMTvC,EANS,KAMDgD,EANC,OAeUT,mBAAS,GAfnB,mBAeTU,EAfS,KAeFC,EAfE,KAiBVC,EAAW,uCAAG,4BAAAjD,EAAA,6DAClBuC,GAAW,GACXM,GAAY,GAFM,SAGKhD,EAfT,GAgBHD,EAAWsD,MAJJ,OAGZC,EAHY,OAMlBV,EAAaU,GACbH,EAAS,GACTL,EAAe,IACfG,EAAU,GACVP,GAAW,GAVO,4CAAH,qDAaXa,EAAW,uCAAG,WAAOC,GAAP,mBAAArD,EAAA,sDAEZuB,EAAS8B,EAAEC,cAAcxB,OACzBJ,EAAUc,EAAU1C,GAAQc,iBAAmBW,IACxCyB,GAAS,SAAAO,GAAI,OAAIA,EAAO,KAC/BC,EAAY,CAChB/C,SAAU+B,EAAU1C,GAAQW,SAC5Bc,SACAG,UACAC,cAAea,EAAU1C,GAAQc,gBAEnC+B,GAAe,SAAAY,GAAI,4BAAQA,GAAR,CAAcC,OAXf,2CAAH,sDA0BjB,OAFAnD,QAAQC,IAAI,gBAAiBkC,GAG3B,qCACE,cAACN,EAAD,IACA,eAACuB,EAAD,CAAMtC,UAAU,MAAhB,UACE,0CACCyB,GAxDS,KAwDGF,EAAYgB,OACvB,cAACC,EAAD,CAAQxC,UAAU,QAAQY,QAASkB,EAAnC,wBACE,KACFL,EAAoC,KAAzB,wCAAWG,EAAX,OACZT,EAAU,qDAA8B,MACvCA,IAAYM,GAEV,cAAC,EAAD,CACE9B,WAAYhB,EAAS,EACrBiB,QAjEI,GAkEJN,SAAU+B,EAAU1C,GAAQW,SAC5BC,QAAS8B,EAAU1C,GAAQY,QAC3BM,WAAY0B,EAAcA,EAAY5C,QAAU8D,EAChD3C,SAAUmC,IAIdR,GAAaN,GAAWI,EAAYgB,SAAW5D,EAAS,GAAgB+D,IAAX/D,EAE3D,KADF,wBAAQqB,UAAU,OAAOY,QAlCZ,WACnB,IAAM+B,EAAShE,EAAS,EAzCV,KA0CVgE,EACFjB,GAAY,GAEZC,EAAUgB,IA6BN,kCAUJL,EAAOzB,IAAOC,IAAV,umBA2BJ0B,EAAS3B,IAAO+B,OAAV,sIC7GGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dc491745.chunk.js","sourcesContent":["\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: any;\n    question: string;\n    type: string\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchData = async (\n    number: number,\n    difficulty: Difficulty\n) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${number}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    console.log(\"data from api : \", data);\n\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: ([...question.incorrect_answers, question.correct_answer])\n        }\n    )\n    )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\ntype Props = {\n    question?: string,\n    answers?: string[],\n    callback?: any,\n    userAnswer?: any,\n    questionNr?: number,\n    totalQs?: number,\n    id?: number,\n    key?: any\n}\n\n\nconst QuestionCard: React.FC<Props> = ({ questionNr, totalQs, answers, userAnswer, callback, question }) => (\n\n    <QuestionCardWrappper>\n        <p className=\"number\">Question: {questionNr} / {totalQs}</p>\n        <p dangerouslySetInnerHTML={{ __html: question! }} />\n        <AnswerWrapper>\n            {answers?.map((answer, _id) => (\n                <ButtonWrapper correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer} key={_id}>\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </AnswerWrapper>\n    </QuestionCardWrappper>\n)\n\nexport default QuestionCard\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n};\n\nconst QuestionCardWrappper = styled.div`\nmax-width: 700px;\nmin-width: 700px;\nbackground: #ebfeff;\nborder-radius: 10px;\nborder: 2px solid #0085a3;\npadding: 20px;\nbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\ntext-align: center;\n>p {\n  font-size: 1rem;\n  font-weight: 600;\n}\n`;\nconst AnswerWrapper = styled.div`\n\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-direction: column;\n    padding: 20px;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n   \n    \n`;\nconst ButtonWrapper = styled.div<ButtonWrapperProps>`\nuser-select: none;\nfont-size: 0.8rem;\nwidth: 100%;\nheight: 40px;\nbutton {\n    :hover {\n        opacity: 0.8;\n        background: #cc2b5e;\n    }\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n        correct\n            ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n            : !correct && userClicked\n                ? 'linear-gradient(90deg, #FF5656, #C16868)'\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n}\n`\n","import { createGlobalStyle } from 'styled-components'\n// @ts-ignore\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height: 100%;\n  }\n  body {\n    background-image: url(https://images.pexels.com/photos/2043569/pexels-photo-2043569.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940);\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`\n","import React from 'react';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { Difficulty, fetchData, QuestionState } from './Components/Api/Api';\nimport QuestionCard from './Components/QuestionCard'\nimport { GlobalStyle } from './App.styles'\n\nconst App = () => {\n  const [Loading, setLoading] = useState(false);\n  const [Questions, setQuestions] = useState<QuestionState[]>([]);\n  const [UserAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [GameOver, setGameOver] = useState(true)\n  const TotalQs = 10;\n  const [number, setNumber] = useState(0);\n\n  type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n\n  }\n  const [score, setScore] = useState(0);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuest = await fetchData(\n      TotalQs, Difficulty.EASY\n    )\n    setQuestions(newQuest);\n    setScore(0);\n    setUserAnswers([])\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    // console.log(\"target Answer: \",);\n    const answer = e.currentTarget.value;\n    const correct = Questions[number].correct_answer === answer;\n    if (correct) setScore(prev => prev + 1);\n    const answerObj = {\n      question: Questions[number].question,\n      answer,\n      correct,\n      correctAnswer: Questions[number].correct_answer\n    }\n    setUserAnswers(prev => [...prev, answerObj]);\n\n  }\n\n  const nextQuestion = () => {\n    const nextqs = number + 1;\n    if (nextqs === TotalQs) {\n      setGameOver(true);\n    } else {\n      setNumber(nextqs)\n    }\n  }\n\n  console.log(\"my data is : \", Questions);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Main className=\"App\">\n        <h1>React TS</h1>\n        {GameOver || UserAnswers.length === TotalQs ?\n          <Button className=\"start\" onClick={startTrivia}>Start Quiz</Button>\n          : null}\n        {!GameOver ? <p>Score: {score} </p> : null}\n        {Loading ? <p>Loading Question ...</p> : null}\n        {!Loading && !GameOver &&\n          (\n            <QuestionCard\n              questionNr={number + 1}\n              totalQs={TotalQs}\n              question={Questions[number].question}\n              answers={Questions[number].answers}\n              userAnswer={UserAnswers ? UserAnswers[number] : undefined}\n              callback={checkAnswer}\n            />\n          )\n        }\n        {!GameOver && !Loading && UserAnswers.length === number + 1 && number !== TotalQs - 1 ?\n          <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n          : null}\n      </Main>\n    </>\n  );\n}\n\nexport default App;\n\n\nconst Main = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  min-width: 600px;\n  min-width: 900px;\n  h1{\n    color: white;\n    font-size: 2rem;\n    background-image: linear-gradient(45deg, red, transparent,blue);\n    text-align: center;\n  }\n  >p{\n    color: white\n  }\n  & .next{\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n`\nconst Button = styled.button`\n  background-image: linear-gradient(180deg, #4156fb 0%, #a119f9 100%);\n  color: white;\n  padding: 6px;\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}